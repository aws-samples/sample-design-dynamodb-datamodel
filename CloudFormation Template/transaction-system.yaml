AWSTemplateFormatVersion: '2010-09-09'
Description: 'Transaction Processing System with DynamoDB and Lambda'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment name

Resources:
  # DynamoDB Table
  TransactionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-transactions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Lambda Execution Role
  TransactionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:TransactWriteItems
                Resource: 
                  - !GetAtt TransactionTable.Arn
                  - !Sub "${TransactionTable.Arn}/index/*"

  # Transaction Processing Lambda
  TransactionProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-transaction-processor
      Handler: index.lambda_handler
      Role: !GetAtt TransactionLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import uuid
          from datetime import datetime
          from botocore.exceptions import ClientError

          # Initialize DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['DYNAMODB_TABLE_NAME'])

          def create_transaction(transaction_data):
              """Create a new transaction record"""
              transaction_id = str(uuid.uuid4())
              timestamp = datetime.utcnow().isoformat()
              
              try:
                  item = {
                      'PK': f"TRANS#{transaction_id}",
                      'SK': 'METADATA',
                      'customerId': f"CUST#{transaction_data['customer_id']}",
                      'status': transaction_data.get('status', 'PENDING'),
                      'creationTime': timestamp,
                      'transactionType': transaction_data.get('transaction_type'),
                      'deliveryId': f"DEL#{str(uuid.uuid4())}" if 'delivery_id' not in transaction_data else f"DEL#{transaction_data['delivery_id']}",
                      'entityType': 'TRANSACTION',
                      'GSI1PK': f"CUST#{transaction_data['customer_id']}",
                      'GSI1SK': f"TRANS#{timestamp}"
                  }
                  
                  table.put_item(Item=item)
                  return item
                  
              except ClientError as e:
                  print(f"Error creating transaction: {e.response['Error']['Message']}")
                  raise

          def create_event(transaction_id, event_data):
              """Create a new event record"""
              timestamp = datetime.utcnow().isoformat()
              
              try:
                  item = {
                      'PK': f"TRANS#{transaction_id}",
                      'SK': f"EVENT#{timestamp}",
                      'eventName': event_data['event_name'],
                      'message': event_data.get('message', ''),
                      'entityType': 'EVENT',
                      'GSI1PK': f"EVENT#{event_data['event_name']}",
                      'GSI1SK': timestamp
                  }
                  
                  table.put_item(Item=item)
                  return item
                  
              except ClientError as e:
                  print(f"Error creating event: {e.response['Error']['Message']}")
                  raise

          def create_delivery(delivery_data):
              """Create a new delivery record"""
              try:
                  item = {
                      'PK': f"DEL#{delivery_data['delivery_id']}",
                      'SK': 'METADATA',
                      'requestXml': delivery_data.get('request_xml', ''),
                      'responseXml': delivery_data.get('response_xml', ''),
                      'entityType': 'DELIVERY',
                      'transactionId': f"TRANS#{delivery_data['transaction_id']}",
                      'GSI1PK': f"TRANS#{delivery_data['transaction_id']}",
                      'GSI1SK': f"DEL#{delivery_data['delivery_id']}"
                  }
                  
                  table.put_item(Item=item)
                  return item
                  
              except ClientError as e:
                  print(f"Error creating delivery: {e.response['Error']['Message']}")
                  raise

          def update_delivery_status(delivery_id, status):
              """Update delivery status"""
              timestamp = datetime.utcnow().isoformat()
              
              try:
                  item = {
                      'PK': f"DEL#{delivery_id}",
                      'SK': 'STATUS#CURRENT',
                      'status': status,
                      'updateTime': timestamp,
                      'entityType': 'DELIVERY_STATUS',
                      'GSI1PK': f"STATUS#{status}",
                      'GSI1SK': timestamp
                  }
                  
                  table.put_item(Item=item)
                  return item
                  
              except ClientError as e:
                  print(f"Error updating delivery status: {e.response['Error']['Message']}")
                  raise

          def lambda_handler(event, context):
              """Main Lambda handler"""
              try:
                  # Parse the incoming event
                  body = json.loads(event['body']) if isinstance(event.get('body'), str) else event.get('body', {})
                  
                  operation = body.get('operation')
                  data = body.get('data', {})
                  
                  if operation == 'create_transaction':
                      result = create_transaction(data)
                      
                      # If event data is provided, create event
                      if 'event' in data:
                          create_event(result['PK'].split('#')[1], data['event'])
                          
                      response = {
                          'transaction_id': result['PK'].split('#')[1],
                          'delivery_id': result['deliveryId'].split('#')[1]
                      }
                      
                  elif operation == 'create_event':
                      result = create_event(data['transaction_id'], data)
                      response = {'status': 'Event created successfully'}
                      
                  elif operation == 'create_delivery':
                      result = create_delivery(data)
                      
                      # If status is provided, update delivery status
                      if 'status' in data:
                          update_delivery_status(data['delivery_id'], data['status'])
                          
                      response = {'status': 'Delivery created successfully'}
                      
                  elif operation == 'update_delivery_status':
                      result = update_delivery_status(data['delivery_id'], data['status'])
                      response = {'status': 'Delivery status updated successfully'}
                      
                  else:
                      return {
                          'statusCode': 400,
                          'body': json.dumps({'error': 'Invalid operation'})
                      }
                      
                  return {
                      'statusCode': 200,
                      'body': json.dumps(response)
                  }
                  
              except Exception as e:
                  print(f"Error processing request: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }

      Runtime: python3.9
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref TransactionTable

  # Optional: API Gateway to expose Lambda
  TransactionApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${Environment}-transaction-api

  TransactionApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TransactionApi
      ParentId: !GetAtt TransactionApi.RootResourceId
      PathPart: transaction

  TransactionApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TransactionApi
      ResourceId: !Ref TransactionApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TransactionProcessingFunction.Arn}/invocations

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: TransactionApiMethod
    Properties:
      RestApiId: !Ref TransactionApi

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref TransactionApi
      StageName: !Ref Environment

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TransactionProcessingFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TransactionApi}/*/*/*

Outputs:
  ApiEndpoint:
    Description: API Endpoint URL
    Value: !Sub https://${TransactionApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/transaction

  TableName:
    Description: DynamoDB Table Name
    Value: !Ref TransactionTable

  LambdaFunction:
    Description: Lambda Function ARN
    Value: !GetAtt TransactionProcessingFunction.Arn
